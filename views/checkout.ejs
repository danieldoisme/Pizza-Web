<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Checkout - PizzazzPizza</title>
  <!-- icons  -->
  <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css" />
  <!-- bootstrap  -->
  <link rel="stylesheet" href="/stylesheets/bootstrap.min.css" />
  <!-- swiper slider  -->
  <link rel="stylesheet" href="/stylesheets/swiper-bundle.min.css" />
  <!-- fancy box  -->
  <link rel="stylesheet" href="/stylesheets/jquery.fancybox.min.css" />
  <!-- custom css  -->
  <link rel="stylesheet" href="/stylesheets/style.css" />
  <script src="https://www.paypal.com/sdk/js?client-id=AQcmhMz3aSeDL5V6zrSn1BiKmTHriSiCLCOLkZgf-jKv4Tbe4Ajjnntdis7duz7yOG8-bslEoaCWh7rR&currency=USD"></script>
</head>

<body class="body-fixed">
  <%- include('partials/userNav') %>

  <div id="viewport">
    <div id="js-scroll-content">
      <section class="section checkout-section" style="background-image: url(/images/menu-bg.png)">
        <div class="sec-wp">
          <div class="container">
            <div class="row">
              <div class="col-12 text-center mb-5">
                <p class="sec-sub-title mb-3">Checkout</p>
                <h2 class="h2-title">Review Your Order</h2>
                <div class="sec-title-shape mb-4">
                  <img src="/images/title-shape.svg" alt="" />
                </div>
              </div>
            </div>

            <div class="row justify-content-center">
              <!-- COD Option -->
              <div class="col-lg-7 mb-4">
                <div class="checkout-card">
                  <div class="checkout-card-header">
                    <h3 class="h3-title">Cash on Delivery</h3>
                  </div>
                  <div class="checkout-card-body">
                    <form id="cod-form" action="/checkout/process-payment" method="POST">
                      <input type="hidden" name="paymentMethod" value="COD">

                      <% if (items && items.length > 0) { %>
                      <% items.forEach(function(item, index) { %>
                      <input type="hidden" name="itemid[]" value="<%= item.item_id %>">
                      <input type="hidden" name="quantity[]" value="<%= item.quantity %>">
                      <input type="hidden" name="subprice[]" value="<%= parseFloat(item.subtotal).toFixed(2) %>">
                      <% }); %>
                      <% } %>

                      <div class="form-group mb-4">
                        <h4 class="h4-title">Delivery Address</h4>

                        <% if (user && user.address) { %>
                        <div class="form-check mb-3">
                          <input class="form-check-input" type="radio" name="addressOption" id="existingAddress" value="existing" checked>
                          <label class="form-check-label" for="existingAddress">
                            Use my existing address
                          </label>
                          <div class="existing-address mt-2">
                            <p class="mb-0"><%= user.address %></p>
                            <input type="hidden" name="address" id="userExistingAddress" value="<%= user.address %>">
                          </div>
                        </div>
                        <% } %>

                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="addressOption" id="newAddress" value="new" <%= !user || !user.address ? 'checked' : '' %>>
                          <label class="form-check-label" for="newAddress">
                            Use a different address
                          </label>
                        </div>

                        <div id="newAddressForm" class="mt-3" style="display: <%= (!user || !user.address) ? 'block' : 'none' %>;">
                          <div class="mb-3">
                            <label for="new_address_line1" class="form-label">Street Address</label>
                            <input type="text" class="form-control form-control-sm" id="new_address_line1" name="new_address_line1" placeholder="Street Address">
                          </div>
                          <div class="mb-3">
                            <label for="new_address_line2" class="form-label">Apartment, suite, etc. (Optional)</label>
                            <input type="text" class="form-control form-control-sm" id="new_address_line2" name="new_address_line2" placeholder="Apartment, suite, etc.">
                          </div>
                          <div class="mb-3">
                            <label for="new_city" class="form-label">City</label>
                            <input type="text" class="form-control form-control-sm" id="new_city" name="new_city" placeholder="City">
                          </div>
                          <div class="mb-3">
                            <label for="new_state" class="form-label">State/Province</label>
                            <input type="text" class="form-control form-control-sm" id="new_state" name="new_state" placeholder="State/Province">
                          </div>
                          <div class="mb-3">
                            <label for="new_postal_code" class="form-label">ZIP/Postal Code</label>
                            <input type="text" class="form-control form-control-sm" id="new_postal_code" name="new_postal_code" placeholder="ZIP/Postal Code">
                          </div>
                          <div class="mb-3">
                            <label for="new_country" class="form-label">Country</label>
                            <input type="text" class="form-control form-control-sm" id="new_country" name="new_country" placeholder="Country">
                          </div>
                        </div>
                      </div>

                      <div class="form-group mb-4">
                        <h4 class="h4-title">Order Summary</h4>
                        <div class="table-responsive checkout-table-wrapper">
                          <table class="table checkout-table">
                            <thead>
                              <tr>
                                <th>Item</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                              </tr>
                            </thead>
                            <tbody>
                              <% let totalAmount = 0; %>
                              <% if (items && items.length > 0) { %>
                              <% items.forEach(function(item) { %>
                              <tr>
                                <td><%= item.item_name %></td>
                                <td>$<%= parseFloat(item.item_price).toFixed(2) %></td>
                                <td><%= item.quantity %></td>
                                <td>$<%= parseFloat(item.subtotal).toFixed(2) %></td>
                                <% totalAmount += item.subtotal; %>
                              </tr>
                              <% }); %>
                              <% } else { %>
                              <tr>
                                <td colspan="4" class="text-center">Your cart is empty</td>
                              </tr>
                              <% } %>
                            </tbody>
                            <tfoot>
                              <tr>
                                <th colspan="3">Total Amount</th>
                                <th>$<%= parseFloat(totalAmount).toFixed(2) %></th>
                              </tr>
                            </tfoot>
                          </table>
                        </div>
                      </div>

                      <div class="text-center">
                        <button type="submit" class="sec-btn sec-btn-orange" <%= items && items.length > 0 ? '' : 'disabled' %>>
                          Confirm Order (Cash on Delivery)
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>

              <!-- Online Payment Options -->
              <div class="col-lg-4">
                <div class="checkout-card">
                  <div class="checkout-card-header">
                    <h3 class="h3-title">Online Payment</h3>
                  </div>
                  <div class="checkout-card-body">
                    <p>Complete your purchase securely with PayPal.</p>

                    <div class="paypal-button-container mb-3" id="paypal-button-container">
                      <!-- PayPal buttons will be inserted here -->
                    </div>

                    <div class="mt-2">
                      <p class="small text-muted">
                        By clicking the PayPal button, you'll be redirected to secure payment processing.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <%- include('partials/footer') %>
    </div>
  </div>

  <!-- jquery  -->
  <script src="/javascripts/jquery-3.5.1.min.js"></script>
  <!-- bootstrap -->
  <script src="/javascripts/bootstrap.min.js"></script>
  <script src="/javascripts/popper.min.js"></script>
  <!-- fontawesome  -->
  <script src="/javascripts/font-awesome.min.js"></script>
  <!-- swiper slider  -->
  <script src="/javascripts/swiper-bundle.min.js"></script>
  <!-- mixitup -- filter  -->
  <script src="/javascripts/jquery.mixitup.min.js"></script>
  <!-- fancy box  -->
  <script src="/javascripts/jquery.fancybox.min.js"></script>
  <!-- parallax  -->
  <script src="/javascripts/parallax.min.js"></script>
  <!-- gsap  -->
  <script src="/javascripts/gsap.min.js"></script>
  <!-- scroll trigger  -->
  <script src="/javascripts/ScrollTrigger.min.js"></script>
  <!-- scroll to plugin  -->
  <script src="/javascripts/ScrollToPlugin.min.js"></script>
  <!-- smooth scroll  -->
  <script src="/javascripts/smooth-scroll.js"></script>
  <!-- custom js  -->
  <script src="/javascripts/main.js"></script>
  <script src="/javascripts/cart.js"></script>
  <script>
    // Calculate total amount based on the items passed from the server
    const checkoutItems = '<%- JSON.stringify(items || []) %>';
    const calculateTotal = () => {
      // Ensure checkoutItems is an array before reducing
      if (!Array.isArray(checkoutItems)) return 0;
      return checkoutItems.reduce((total, item) => total + (item.subtotal || 0), 0);
    };

    // Single DOMContentLoaded event handler for all initialization
    document.addEventListener('DOMContentLoaded', function() {
      const existingAddressRadio = document.getElementById('existingAddress');
      const newAddressRadio = document.getElementById('newAddress');
      const newAddressForm = document.getElementById('newAddressForm');
      const userExistingAddress = document.getElementById('userExistingAddress');
      const newAddressLine1 = document.getElementById('new_address_line1');
      const newCity = document.getElementById('new_city');
      const newPostalCode = document.getElementById('new_postal_code');
      const newCountry = document.getElementById('new_country');
      const codForm = document.getElementById('cod-form');
      const scrollContentElement = document.getElementById('js-scroll-content'); // Get the scrollable element

      // Function to update address form visibility
      function updateAddressFormVisibility() {
        // Check if elements exist before accessing properties
        if (newAddressForm && newAddressRadio) {
          if (newAddressRadio.checked) {
            newAddressForm.style.display = 'block';
          } else {
            newAddressForm.style.display = 'none';
          }

          // Dispatch a window resize event to trigger the smooth-scroll.js update
          window.dispatchEvent(new Event('resize'));
        }
      }

      // Setup address toggle functionality
      if (newAddressForm && (existingAddressRadio || newAddressRadio)) { // Ensure form and at least one radio exist
        // Set initial visibility based on checked state on page load
        updateAddressFormVisibility();

        // Add event listeners if radios exist
        if (existingAddressRadio) {
          existingAddressRadio.addEventListener('change', updateAddressFormVisibility);
        }
        if (newAddressRadio) {
          newAddressRadio.addEventListener('change', updateAddressFormVisibility);
        }

        // Update form before submission logic (ensure elements exist)
        if (codForm && newAddressRadio && userExistingAddress) {
          codForm.addEventListener('submit', function(e) {
            e.preventDefault(); // Prevent default form submission to handle with fetch

            if (newAddressRadio.checked &&
              (!newAddressLine1 || newAddressLine1.value.trim() === '' ||
                !newCity || newCity.value.trim() === '' ||
                !newPostalCode || newPostalCode.value.trim() === '' ||
                !newCountry || newCountry.value.trim() === '')) {
              alert('Please fill in all required new address fields (Street, City, ZIP/Postal Code, Country).');
              return false; // Stop submission
            }

            // REMOVE THE PROBLEMATIC LINE:
            // if (newAddressRadio.checked) {
            //   userExistingAddress.value = deliveryAddress.value;
            // }

            const formData = new FormData(codForm);
            const action = codForm.action;
            const method = codForm.method;

            fetch(action, {
                method: method,
                body: new URLSearchParams(formData) // Properly encode form data
              })
              .then(response => response.json())
              .then(data => {
                if (data.success && data.redirectUrl) {
                  window.location.href = data.redirectUrl;
                } else {
                  // Handle error or unexpected response
                  alert('There was an issue processing your order. Please try again.');
                  console.error('Order processing failed or redirectUrl missing:', data);
                }
              })
              .catch(error => {
                console.error('Error submitting COD form:', error);
                alert('An error occurred. Please try again.');
              });
          });
        } else {
          console.warn("COD form submission logic cannot be fully initialized - elements missing.");
        }
      } else {
        console.warn("Address toggle functionality cannot be initialized - elements missing.");
      }

      // Initialize PayPal button
      const paypalContainer = document.getElementById('paypal-button-container');
      if (paypalContainer) {
        if (typeof paypal !== 'undefined') {
          paypal.Buttons({
            onClick: function(data, actions) {
              // Called when the buyer clicks a PayPal button (PayPal, Pay Later, Venmo, or Card fields)
              console.log('PayPal button clicked (funding source: ' + data.fundingSource + '), dispatching resize.');
              window.dispatchEvent(new Event('resize'));
              // You can use this to perform validations before PayPal's own flow starts.
              // If validation fails: return actions.reject();
              return actions.resolve(); // If validation passes
            },
            createOrder: function(data, actions) {
              window.dispatchEvent(new Event('resize')); // Also keep here for initial order creation
              const currentItems = JSON.parse('<%- JSON.stringify(items || []) %>');
              const total = currentItems.reduce((sum, item) => sum + (item.subtotal || 0), 0);

              if (total <= 0) {
                alert('Your cart is empty or has no value.');
                // Disable button or return a rejected promise
                return Promise.reject(new Error('Cart is empty'));
              }

              console.log("Creating PayPal order with amount:", total);

              return actions.order.create({
                purchase_units: [{
                  amount: {
                    value: total.toFixed(2) // Use calculated total, ensure 2 decimal places
                  }
                }]
              });
            },

            // Handle the successful payment
            onApprove: function(data, actions) {
              return actions.order.capture().then(function(orderData) {
                console.log('PayPal Capture result:', orderData);
                const formData = new FormData();

                // --- START: Extract and add PayPal shipping address ---
                let paypalShippingAddress = null;
                if (orderData.purchase_units && orderData.purchase_units[0] && orderData.purchase_units[0].shipping) {
                  const shipping = orderData.purchase_units[0].shipping;
                  const address = shipping.address;
                  // Construct a single address string (adjust format as needed)
                  const addressParts = [
                    shipping.name ? shipping.name.full_name : '', // Include recipient name if available
                    address.address_line_1,
                    address.address_line_2,
                    address.admin_area_2, // City
                    address.admin_area_1, // State/Region
                    address.postal_code,
                    address.country_code
                  ];
                  paypalShippingAddress = addressParts.filter(part => part).join(', '); // Filter out empty parts and join
                  console.log("PayPal provided shipping address:", paypalShippingAddress);
                  formData.append('paypalShippingAddress', paypalShippingAddress);
                } else {
                  // If no address from PayPal, check the address selected/entered on the page
                  const selectedAddressOption = document.querySelector('input[name="addressOption"]:checked');
                  if (selectedAddressOption && selectedAddressOption.value === 'existing') {
                    const existingAddrInput = document.getElementById('userExistingAddress');
                    if (existingAddrInput && existingAddrInput.value.trim() !== '') {
                      formData.append('address', existingAddrInput.value.trim());
                    }
                  } else if (selectedAddressOption && selectedAddressOption.value === 'new') {
                    // Append individual new address fields
                    const new_address_line1_val = document.getElementById('new_address_line1') ? document.getElementById('new_address_line1').value.trim() : '';
                    const new_address_line2_val = document.getElementById('new_address_line2') ? document.getElementById('new_address_line2').value.trim() : '';
                    const new_city_val = document.getElementById('new_city') ? document.getElementById('new_city').value.trim() : '';
                    const new_state_val = document.getElementById('new_state') ? document.getElementById('new_state').value.trim() : '';
                    const new_postal_code_val = document.getElementById('new_postal_code') ? document.getElementById('new_postal_code').value.trim() : '';
                    const new_country_val = document.getElementById('new_country') ? document.getElementById('new_country').value.trim() : '';

                    if (new_address_line1_val && new_city_val && new_postal_code_val && new_country_val) {
                      formData.append('new_address_line1', new_address_line1_val);
                      if (new_address_line2_val) formData.append('new_address_line2', new_address_line2_val);
                      formData.append('new_city', new_city_val);
                      if (new_state_val) formData.append('new_state', new_state_val);
                      formData.append('new_postal_code', new_postal_code_val);
                      formData.append('new_country', new_country_val);
                      console.log("Using new address from page form for PayPal order.");
                    } else {
                      console.warn("Attempted to use new address from form for PayPal, but required fields are missing.");
                    }
                  }
                }
                // --- END: Extract and add PayPal shipping address ---


                // Add items, quantities, and prices from the checkoutItems array
                const currentItems = JSON.parse('<%- JSON.stringify(items || []) %>');
                currentItems.forEach(item => {
                  formData.append('itemid[]', item.item_id);
                  formData.append('quantity[]', item.quantity);
                  formData.append('subprice[]', item.subtotal);
                });

                // Display loading indicator or disable buttons here
                document.body.style.cursor = 'wait';
                if (paypalContainer) paypalContainer.style.opacity = '0.5';

                fetch('/checkout/process-payment', {
                    method: 'POST',
                    body: formData
                  })
                  .then(response => {
                    document.body.style.cursor = 'default';
                    if (paypalContainer) paypalContainer.style.opacity = '1';
                    if (response.redirected) {
                      window.location.href = response.url;
                    } else {
                      return response.json().then(data => {
                        if (data && data.redirectUrl) {
                          window.location.href = data.redirectUrl;
                        } else if (data && !data.success) {
                          alert('Payment processing error: ' + (data.message || 'Unknown server error'));
                        } else if (!response.ok) {
                          alert(`Server error: ${response.status} ${response.statusText}`);
                        } else {
                          console.log("Payment processed, but no redirect. Response:", data);
                        }
                      });
                    }
                  })
                  .catch(error => {
                    document.body.style.cursor = 'default';
                    if (paypalContainer) paypalContainer.style.opacity = '1';
                    console.error('Fetch Error:', error);
                    alert('An error occurred submitting payment details to the server. Please try again.');
                  })
                  .finally(() => {
                    window.dispatchEvent(new Event('resize'));
                  });
              });
            },
            onError: function(err) {
              console.error('PayPal Button Error:', err);
              alert('An error occurred with the PayPal payment process. Please check console for details or try again.');
              document.body.style.cursor = 'default';
              if (paypalContainer) paypalContainer.style.opacity = '1';
              window.dispatchEvent(new Event('resize'));
            },
            onCancel: function(data) {
              console.log('Payment cancelled by user:', data);
              alert('Payment was cancelled.');
              document.body.style.cursor = 'default';
              if (paypalContainer) paypalContainer.style.opacity = '1';
              window.dispatchEvent(new Event('resize'));
            }
          }).render('#paypal-button-container').then(() => {
            // After buttons are rendered, set up MutationObserver for dynamic content changes
            if (paypalContainer) {
              let debounceTimeout;
              const observer = new MutationObserver((mutationsList, obs) => {
                clearTimeout(debounceTimeout);
                debounceTimeout = setTimeout(() => {
                  console.log('Mutation observed in PayPal container (debounced), dispatching resize.');
                  window.dispatchEvent(new Event('resize'));
                }, 150); // Debounce to avoid excessive calls
              });
              observer.observe(paypalContainer, {
                childList: true, // Observe direct children additions/removals
                subtree: true, // Observe all descendants
                attributes: true // Observe attribute changes (e.g., style, class)
              });
              // This observer will run until the page is unloaded.
            }
          }).catch(err => {
            console.error("Failed to render PayPal Buttons:", err);
            paypalContainer.innerHTML = "<p class='text-danger'>Could not load PayPal buttons. Please try refreshing the page or use Cash on Delivery.</p>";
          }).finally(() => {
            // Initial resize after render attempt
            window.dispatchEvent(new Event('resize'));
          });
        } else {
          console.error("PayPal SDK script not loaded.");
          paypalContainer.innerHTML = "<p class='text-danger'>PayPal is currently unavailable. Please try refreshing the page or use Cash on Delivery.</p>";
        }
      } else {
        console.warn("PayPal button container not found.");
      }
    });
  </script>
</body>

</html>