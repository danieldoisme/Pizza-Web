<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> - PizzazzPizza Admin</title>
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon">
  <link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css" />
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/stylesheets/style.css">

  <style>
    .admin-main-content .section {
      padding-top: 20px;
      padding-bottom: 20px;
    }

    .admin-main-content {
      background-color: #f4f6f9;
      color: #333;
    }

    .content-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 25px;
      padding: 15px 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      border-bottom: 1px solid #e9ecef;
    }

    .content-header h1 {
      margin: 0;
      font-size: 1.7em;
      color: #343a40;
      font-weight: 500;
    }

    .content-header .header-actions {
      display: flex;
      align-items: center;
      flex-shrink: 0;
      gap: 12px;
    }

    .header-actions .btn {
      font-size: 0.85rem;
      padding: 0.4rem 0.8rem;
    }

    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
    }

    @media (min-width: 992px) {
      .dashboard-grid {
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      }
    }

    @media (min-width: 1300px) {
      .dashboard-grid.kpi-focused {
        grid-template-columns: repeat(3, 1fr);
      }

      .dashboard-grid.charts-focused {
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
      }
    }

    .kpi-card,
    .chart-card,
    .table-card {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);
      border: 1px solid #e9ecef;
      color: #555;
      display: flex;
      flex-direction: column;
    }

    .kpi-card h2,
    .chart-card h2,
    .table-card h2 {
      margin-top: 0;
      font-size: 0.9em;
      color: #6c757d;
      margin-bottom: 8px;
      border-bottom: none;
      padding-bottom: 0;
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .kpi-card {
      justify-content: space-between;
    }

    .kpi-card .kpi-content-top {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      width: 100%;
    }

    .kpi-card .kpi-text p {
      font-size: 2.2em;
      font-weight: 600;
      margin: 0;
      color: #28a745;
      line-height: 1.1;
    }

    #totalSales {
      color: #007bff;
    }

    #totalOrders {
      color: #ff8c00;
    }

    #averageOrderValue {
      color: #6f42c1;
    }

    .kpi-card .kpi-icon-container .uil {
      font-size: 2.5em;
      color: #ff8c00;
      opacity: 0.8;
    }

    .kpi-card h2 {
      margin-top: 10px;
    }

    .chart-card {
      min-height: 380px;
      height: auto;
      max-height: 450px;
      position: relative;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      padding-bottom: 35px;
    }

    .chart-card h2 {
      color: #343a40;
      font-size: 1.0em;
      border-bottom: 1px solid #e9ecef;
      padding-bottom: 8px;
      margin-bottom: 10px;
      flex-shrink: 0;
    }

    .chart-card canvas {
      max-width: 100%;
      flex-grow: 1;
    }

    .chart-card.chart-large {
      min-height: 400px;
      max-height: 500px;
    }

    .table-card h2 {
      color: #343a40;
      font-size: 1.1em;
      border-bottom: 1px solid #e9ecef;
      padding-bottom: 10px;
      margin-bottom: 10px;
    }

    .table-card ul {
      list-style: none;
      padding: 0;
      margin: 0;
      flex-grow: 1;
      overflow-y: auto;
      max-height: 280px;
    }

    .table-card li {
      padding: 10px 5px;
      border-bottom: 1px solid #f1f1f1;
      font-size: 0.9em;
      color: #555;
      display: flex;
      justify-content: space-between;
    }

    .table-card li:last-child {
      border-bottom: none;
    }

    .table-card .item-name {
      font-weight: 500;
      color: #333;
    }

    .table-card .item-value {
      color: #ff8c00;
      font-weight: 500;
    }

    .btn:disabled {
      opacity: 0.65;
      cursor: not-allowed;
    }
  </style>
</head>

<body class="admin-active">
  <%- include('../partials/adminSidebar', { page: 'statistics' }) %>

  <div class="admin-main-content">
    <div id="viewport">
      <div id="js-scroll-content">
        <section class="section" id="statistics-dashboard-page" style="background-image: url(/images/menu-bg.png);">
          <div class="container-fluid">

            <div class="content-header">
              <h1><%= title %></h1>
              <div class="header-actions">
                <button id="refreshDataBtn" class="btn btn-info btn-sm">
                  <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display: none;"></span>
                  Refresh Data
                </button>
                <a href="/admin/statistics/dashboard/export" class="btn btn-success btn-sm">Export to Excel</a>
              </div>
            </div>

            <div class="dashboard-grid kpi-focused">
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="totalSales"><%= data.totalSales.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-usd-circle"></i></div>
                </div>
                <h2>Total Sales</h2>
              </div>
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="totalOrders"><%= data.totalOrders %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-shopping-bag"></i></div>
                </div>
                <h2>Total Orders</h2>
              </div>
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="averageOrderValue"><%= parseFloat(data.averageOrderValue).toLocaleString('en-US', { style: 'currency', currency: 'USD' }) %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-bill"></i></div>
                </div>
                <h2>Average Order Value</h2>
              </div>
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="unprocessedOrders" style="color: #dc3545;"><%= data.unprocessedOrders %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-clock-eight"></i></div>
                </div>
                <h2>Unprocessed Orders</h2>
              </div>
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="totalUsers" style="color: #17a2b8;"><%= data.totalUsers %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-users-alt"></i></div>
                </div>
                <h2>Total Users</h2>
              </div>
              <div class="kpi-card">
                <div class="kpi-content-top">
                  <div class="kpi-text">
                    <p id="newUsersToday" style="color: #17a2b8;"><%= data.newUsersToday %></p>
                  </div>
                  <div class="kpi-icon-container"><i class="uil uil-user-plus"></i></div>
                </div>
                <h2>New Users Today</h2>
              </div>
            </div>

            <div class="dashboard-grid charts-focused" style="margin-top: 20px;">
              <div class="chart-card chart-large">
                <h2>Revenue Trends</h2>
                <canvas id="revenueTrendsChart"></canvas>
              </div>
              <div class="chart-card">
                <h2>Order Statuses</h2>
                <canvas id="orderStatusChart"></canvas>
              </div>
              <div class="chart-card">
                <h2>Payment Statuses</h2>
                <canvas id="paymentStatusChart"></canvas>
              </div>

              <div class="table-card">
                <h2>Best Sellers</h2>
                <ul id="bestSellersList">
                  <% data.bestSellers.forEach(item => { %>
                  <li><span class="item-name"><%= item.name %></span> <span class="item-value"><%= item.quantity %> sold</span></li>
                  <% }); %>
                </ul>
              </div>
              <div class="table-card">
                <h2>Menu Performance</h2>
                <ul id="menuPerformanceList">
                  <% data.menuPerformance.forEach(item => { %>
                  <li><span class="item-name"><%= item.name %></span> <span class="item-value">Orders: <%= item.orders %>, Rev: <%= item.revenue.toLocaleString('en-US', { style: 'currency', currency: 'USD' }) %></span></li>
                  <% }); %>
                </ul>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <script src="/socket.io/socket.io.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let dashboardData = <%- JSON.stringify(data || {}) %>;
      let revenueTrendsChartInstance, orderStatusChartInstance, paymentStatusChartInstance;

      const orderStatusColors = {
        'Pending': '#ffc107',
        'Processing': '#007bff',
        'Dispatched': '#17a2b8',
        'Delivered': '#28a745',
        'Cancelled': '#dc3545',
        'Default': '#6c757d'
      };

      const paymentStatusColors = {
        'Paid': '#28a745',
        'Unpaid': '#ffc107',
        'Failed': '#dc3545',
        'Pending Payment': '#17a2b8',
        'Refunded': '#6c757d',
        'Default': '#6c757d'
      };

      function updateKPIsAndLists(newData) {
        if (!newData) return;
        $('#totalSales').text((newData.totalSales || 0).toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD'
        }));
        $('#totalOrders').text(newData.totalOrders || 0);
        $('#averageOrderValue').text(parseFloat(newData.averageOrderValue || 0).toLocaleString('en-US', {
          style: 'currency',
          currency: 'USD'
        }));
        $('#unprocessedOrders').text(newData.unprocessedOrders || 0);
        $('#totalUsers').text(newData.totalUsers || 0);
        $('#newUsersToday').text(newData.newUsersToday || 0);

        const bestSellersList = $('#bestSellersList');
        bestSellersList.empty();
        if (newData.bestSellers && newData.bestSellers.length > 0) {
          newData.bestSellers.forEach(item => {
            bestSellersList.append(`<li><span class="item-name">${item.name}</span> <span class="item-value">${item.quantity} sold</span></li>`);
          });
        }

        const menuPerformanceList = $('#menuPerformanceList');
        menuPerformanceList.empty();
        if (newData.menuPerformance && newData.menuPerformance.length > 0) {
          newData.menuPerformance.forEach(item => {
            const formattedRevenue = (item.revenue || 0).toLocaleString('en-US', {
              style: 'currency',
              currency: 'USD'
            });
            menuPerformanceList.append(`<li><span class="item-name">${item.name}</span> <span class="item-value">Orders: ${item.orders}, Rev: ${formattedRevenue}</span></li>`);
          });
        }
      }

      function renderRevenueTrendsChart(chartData) {
        const canvas = document.getElementById('revenueTrendsChart');
        if (!canvas || !chartData) return;
        if (revenueTrendsChartInstance) revenueTrendsChartInstance.destroy();
        revenueTrendsChartInstance = new Chart(canvas.getContext('2d'), {
          type: 'line',
          data: {
            labels: chartData.labels,
            datasets: [{
              label: 'Revenue',
              data: chartData.data,
              borderColor: '#ff8c00',
              backgroundColor: 'rgba(255, 140, 0, 0.15)',
              tension: 0.3,
              fill: true
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true
              },
              x: {}
            }
          }
        });
      }

      function renderOrderStatusChart(statusData) {
        const canvas = document.getElementById('orderStatusChart');
        if (!canvas || !statusData) return;
        const ctx = canvas.getContext('2d');
        const labels = Object.keys(statusData);
        const dataValues = Object.values(statusData);
        const backgroundColors = labels.map(label => orderStatusColors[label] || orderStatusColors['Default']);

        if (orderStatusChartInstance) orderStatusChartInstance.destroy();
        orderStatusChartInstance = new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: dataValues,
              backgroundColor: backgroundColors,
              borderColor: '#fff'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'top'
              }
            }
          }
        });
      }

      function renderPaymentStatusChart(statusData) {
        const canvas = document.getElementById('paymentStatusChart');
        if (!canvas || !statusData) return;
        const ctx = canvas.getContext('2d');
        const labels = Object.keys(statusData);
        const dataValues = Object.values(statusData);
        const backgroundColors = labels.map(label => paymentStatusColors[label] || paymentStatusColors['Default']);

        if (paymentStatusChartInstance) paymentStatusChartInstance.destroy();
        paymentStatusChartInstance = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: labels,
            datasets: [{
              data: dataValues,
              backgroundColor: backgroundColors,
              borderColor: '#fff'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'top'
              }
            }
          }
        });
      }

      function updateAllVisuals(newData) {
        updateKPIsAndLists(newData);
        renderRevenueTrendsChart(newData.revenueTrends);
        renderOrderStatusChart(newData.orderStatusCounts);
        renderPaymentStatusChart(newData.paymentStatusCounts);
      }

      if (dashboardData && Object.keys(dashboardData).length > 0) {
        updateAllVisuals(dashboardData);
      }

      const socket = io();
      socket.on('connect', () => {
        console.log('Socket.IO connected successfully.');
      });

      socket.on('dashboard_update', function(newData) {
        console.log('Received updated data from server:', newData);
        dashboardData = newData;
        updateAllVisuals(newData);
      });

      socket.on('disconnect', () => {
        console.log('Socket.IO disconnected.');
      });
    });
  </script>
</body>

</html>